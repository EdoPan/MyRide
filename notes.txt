-- Queries SQL

CREATE TABLE users (
    username varchar(255) PRIMARY KEY,
    password varchar(255),
    isMaintainer boolean
);

CREATE TABLE bikes (
    id INTEGER PRIMARY KEY,
    type varchar(255),
  	price double,
  	stationID int
);

CREATE TABLE rides (
    id INTEGER PRIMARY KEY,
    startTime TEXT,
  	endTime TEXT,
    bikeID int,
  	username varchar(255)
);

CREATE TABLE stations (
    id INTEGER PRIMARY KEY,
    address varchar(255)
);

INSERT INTO users(username, password, isMaintainer) VALUES ('maintainer', 'maintainer', true);

INSERT INTO stations(address) VALUES ('Via Diotisalvi 2');
INSERT INTO stations(address) VALUES ('Largo Bruno Pontecorvo 3');
INSERT INTO stations(address) VALUES ('Corso Italia 60');
INSERT INTO stations(address) VALUES ('Via di Gello 138');
INSERT INTO stations(address) VALUES ('Piazza Martiri della Libertà 33');
INSERT INTO stations(address) VALUES ('Via S. Marco 15');

INSERT INTO bikes(type, price, stationID) VALUES ('city', 0.25, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('city', 0.25, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('city', 0.25, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('city', 0.25, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('mountain', 0.50, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('mountain', 0.50, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('mountain', 0.50, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('mountain', 0.50, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('road', 0.75, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('road', 0.75, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('road', 0.75, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('road', 0.75, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('tandem', 1.00, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('tandem', 1.00, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('tandem', 1.00, 1);
INSERT INTO bikes(type, price, stationID) VALUES ('tandem', 1.00, 1);

// Comportamento nodi Erlang

10.2.1.122 -> master node -> fa spawnare le chat sui container inizializza i DB Mnesia 
    Nota sui DB Mnesia è che questi condividono gli stessi dati fra di loro
10.2.1.123-124 -> slave node -> fanno l'handling delle chat

// NGINX
10.2.1.121 -> backend, frontend, database
10.2.1.122 -> backed, frontend, database, NGINX, master node Erlang
10.2.1.123 -> slave node Erlang
10.2.1.124 -> slave node Erlang

Creare file: nginx.conf
Spostarlo in: etc/nginx
Riavviare il servizio NGINX: systemctl restart nginx

# Inizio file

http {
    upstream myride {
        least_conn;
        server 10.2.1.123:porta;
        server 10.2.1.124:porta;
    }

    server {
        listen 80;

        location / {
            proxy_pass http://myride;
        }
    }
}

% Rebar3 create app and check dependencies
rebar3 new app <app_name>
rebar3 get-deps
rebar3 tree

% Rebar3 compile project
rebar3 compile

% Rebar3 Master Node (run inside master_node/)
rebar3 shell --name master@127.0.0.1 --setcookie myRide

% Rebar3 Chat Node (run inside chat_node/)
rebar3 shell --name server@127.0.0.1 --setcookie myRide